//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

= MicroProfile Problem Details
:authors: RÃ¼diger zu Dohna
:email: ruediger.dohna@codecentric.de
:version-label!:
:sectanchors:
:doctype: book
:license: Apache License v2.0
:source-highlighter: coderay
:icons: font
:numbered:
:toc: left
:toclevels: 4
:sectnumlevels: 4
ifdef::backend-pdf[]
:pagenums:
endif::[]

include::license-alv2.asciidoc[]

== Introduction

MicroProfile Problem Details defines a standard to map existing or custom exceptions to http response bodies containing problem details as specified in https://tools.ietf.org/html/rfc7807[RFC-7807] on the server side and/or convert and throw such problem detail bodies as exceptions on the client side.

For details about the terms and their semantics, please see the RFC.

== Authoritative Examples

=== Server Side

On the server side, you can simply throw an exception. The exception can be a standard or a custom exception:

[source,java]
---------------------------------------------------------------
public class OutOfCreditException extends RuntimeException {
    public OutOfCreditException(String message) {
        super(message);
    }
}
---------------------------------------------------------------

This will result in an entity similar to this:

[source,yaml]
---------------------------------------------------------------
{
  "type": "urn:problem-type:out-of-credit",                   # <1>
  "title": "Out Of Credit",                                   # <2>
  "status": 400,                                              # <3>
  "detail": "Your current balance is 30, but that costs 50.", # <4>
  "instance": "urn:uuid:d294b32b-9dda-4292-b51f-35f65b4bf64d" # <5>
}
---------------------------------------------------------------

<1> The default `type` is a URN derived from the simple type name of the exception by converting camel case to kebap case and stripping the `Exception` (but not `Error`). The package is not included, as the `type` has to be very stable, and moving an exception from one package to another should not affect the `type` field.
<2> The default `title` is similarly derived from the type name of the exception by converting camel case to separate words.
<3> The default `status` (the field as well as the http status) is `400 Bad Request` for custom exceptions and `500 Internal Server Error` for standard exceptions like `NullPointerException`. Exceptions with an _obvious_ status code MUST be mapped to that code, e.g. the `javax.ws.rs.NotFoundException` to 404.
<4> The default `detail` is the exception message. If this is a problem for you, you can disable it with a config option (see below).
<5> The default `instance` is a random UUID URN.

==== Content-Type

In the example above, the container sets the `Content-Type` header to `application/problem+json`.

If the client prefers (with an `Accept` header) a content type of `application/xml`, the entity will be the xml equivalent of this document (more details in the https://tools.ietf.org/html/rfc7807#appendix-A[rfc]) and the content type is `application/problem+xml`.

If the client prefers `text/html`, a compliant container SHOULD render a problem detail as a html page with all the fields and extensions, but *not* with a stack trace (except when the user has explicitly enabled some kind of development mode).

Implementations SHOULD honor other requested types, e.g. `application/yaml`, and produce a corresponding `application/problem+yaml`, when they can produce that type of entity.

If no requested type is acceptable, the container MUST produce `application/problem+json`.

==== Logging

The main use of the `instance` field is to have a reference to search for in the logs. So an appropriate log event is produced whenever the problem detail is created. Then you can see all the logs that led to the problem and other details, such as the stack trace. The stack trace is explicitly _never_ part of the entity, as it must be considered to be sensitive.

The logging category defaults to the fully qualified class name of the exception.

By default, `4xx` status codes are considered a problem of the client and are logged at `INFO` log level; `5xx` status codes are a problem of the service, so they are logged at `ERROR`. As the stack trace is only relevant for server problems, it's only logged at `ERROR` and `WARN` levels, not at `INFO` or `DEBUG` (see below for how to log at `WARN` or `DEBUG` levels).

==== Annotations

Each of the defaults above can optionally be overridden with corresponding annotations. Additionally, custom problem detail fields (called extensions) can be defined with `@Extension` annotated fields or methods. E.g.:

[source,java]
---------------------------------------------------------------
@Type("https://example.com/probs/out-of-credit")
@Title("You do not have enough credit.")
@Status(FORBIDDEN)                                           // <1>
@Logging(at = WARN, to = "warnings")                         // <2>
public class OutOfCreditException extends RuntimeException {
    @Instance private URI instance;                          // <3>
    private int cost;                                        // <4>
    @Extension private int balance;                          // <5>
    @Extension private List<URI> accounts;                   // <6>

    @Detail public String getDetail() {                      // <7>
        return "Your current balance is " + balance + ", but that costs " + cost;
    }
}
---------------------------------------------------------------

<1> The status is a constant from the `ResponseStatus` enum. Other status codes are not appropriate for custom exceptions as they may have unexpected side effects on caching proxies, etc. In the rare case that you still need them, you can use standard exceptions like `javax.ws.rs.WebApplicationException`.
<2> The `@Logging` annotation defines the log level and the category. You can also annotate a package (i.e. in the `package-info.java` file) to be a default for all exceptions in the package.
<3> The `@Instance` annotation can be on a field or a no-arg method. A `null` value removes the entire field. The behavior of multiple fields and/or methods annotated as `@Instance` with a non-null value is undefined.
<4> This field is not annotated, so it won't be part of the entity.
<5> There can be multiple `@Extension` annotations on fields or no-arg methods. Their names will be used as the keys. The behavior for multiple extensions with the same name is undefined.
<6> The values can be arbitrarily complex, i.e. also nested arrays, lists, maps, or objects, as long as they are (de)serializable by the underlying (de)serializer, e.g. JSON-B.
<7> The `@Detail` annotation can be on a field or a no-arg method. Multiple non-null details are concatenated with a space in the order of their field/method name.

// TODO describe the error handling when the invocation of a method fails

This produces a problem detail entity like this:

[source,json]
---------------------------------------------------------------
{
  "type": "https://example.com/probs/out-of-credit",
  "title": "Forbidden",
  "status": 403,
  "detail": "Your current balance is 30, but that costs 50.",
  "instance": "urn:uuid:d294b32b-9dda-4292-b51f-35f65b4bf64d",
  "balance": 50,
  "accounts": [
    "/account/12345",
    "/account/67890"
  ]
}
---------------------------------------------------------------

Extensions come after the standard fields. The order of extensions is alphabetic (which is better for tests than random).

==== Validations

One of the most common use-cases for Bad Requests is a failing validation. You can do a verification and throw a corresponding problem detail exception simply by throwing a `ValidationException` from Bean Validation or by annotating a parameter to a REST boundary method as `@Valid`. E.g.:

[source,java]
---------------------------------------------------------------
@Path("/persons")
public class PersonBoundary {
    @POST public String post(@Valid Person person) {
        /// ...
    }
}
---------------------------------------------------------------

The container produces a type `urn:problem-type:validation-failed` problem detail with a map of `violations` containing the violating field paths to the violations:

[source,json]
---------------------------------------------------------------
{
    "type": "urn:problem-type:validation-failed",
    "title": "Validation Failed",
    "status": 400,
    "detail": "2 violations failed",
    "instance": "urn:uuid:d5339593-2082-463a-a603-cb527ba57b9b",
    "violations": {
        "post.person.firstName": "must not be null",
        "post.person.lastName": "must not be empty"
    }
}
---------------------------------------------------------------

=== Client Side

On the client side, a type-safe exception is thrown for your code to catch:

[source,java]
---------------------------------------------------------------
class OrderGateway {
    public Shipment order(String articleId) {
        try {
            return call(articleId);
        } catch (OutOfCreditException e) {
            displayOutOfCredit(e.getBalance());
            return null;
        }
    }
}
---------------------------------------------------------------

The container maps the problem detail entity to an exception that would produce that `type` field. If no corresponding exception is found, it throws a standard exception for the status code, e.g. a `ForbiddenException` with the message set to the `detail` field, when available.

==== Logging

// TODO what should we log on the client side?

== Configuration

=== `exceptionMessageAsDetail`

The exception message is regularly a very good default `detail`. They already often get exposed in the stack traces generated by application containers, so they are generally safe. But when migrating a code base where this can not be validated sufficiently, you can disable these default message detail fields by setting the MP Config option `exceptionMessageAsDetail` to `false`.

== Security Considerations

The security considerations from https://tools.ietf.org/html/rfc7807#section-5[the rfc] apply here as well: when you produce problem details, you must scrutinize the information you expose.

The container MUST NOT add any unsolicited details: only the annotated fields and/or the defaults may be exposed; the defaults only expose the exceptions' simple class name and the message. Exception names are considered uncritical and messages should already be safe, as they often are exposed in stack traces. When migrating a code base where this may not be the case, the corresponding configuration option can be set in order to hide the messages by default.

The `instance` uuid MUST be a fully random uuid, as other uuids may expose network or time setting information. As noted above, esp. stack-traces MUST NOT go into the responses from a server, but only into the logs.

De/serializing a problem detail, esp. the extension fields, can also open a potential attack vector. This is a common scenario containers must handle generally; this is just a reminder.

== Open Questions

1. There's already an `@Extension` annotation in MP OpenApi. I think it's rarely a problem, as the problem extensions are only applied to exceptions, while the OpenApi extensions are only applied to JAX-RS interfaces.
2. Do we need an annotation parameter `@Logging(withStackTrace = ON)` or `OFF` or default `AUTO`.
3. How do we distinguish custom from standard exceptions, so the default status is 400 vs. 500? Almost all custom exceptions will be in the 4xx range and 400 is a very good default. OTOH standard exceptions like NPE are a problem in the service and should be mapped to a 500. Current approach: packages that start with `java.` or `javax.` or `jakarta.` are 'standard'; everything else is 'custom'.
4. How do we handle problems that origin from a remote call? Should we wrap them in a 502 Bad Gateway?
5. It's possible to send problem details to the server, e.g. for asynchronous responses. Is this out of scope or should we mention it? The code on the client as well as on the server would have to look quite different.
6. Should we remove the `get` (and lowercase the first letter) from the name of an `@Extension` method?
