//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

= Problem Details

The proposed standard https://tools.ietf.org/html/rfc7807[RFC-7807] specifies an http response message entity (body) to convey the machine- and human-readable details about a problem with a request. When applying this standard to the Java world, exceptions on the server side can be mapped to such a problem details; and/or problem detail responses can trigger an exception on the client side, eventually containing the information provided in the message.

The MicroProfile Problem Detail specification defines that compliant implementations:

* Map exceptions thrown while processing an http request to valid problem detail documents.
* Use defaults for the various specified fields.
* Consider the annotations defined in the API to override those defaults or add extension fields.
* Log the occurrence of such exceptions with all their details.
* Map problem detail http message entities on the client side back to appropriate standard or a (compatible) custom exception containing the fields and extensions.


== Building

Just enter `mvn` at the command line and maven will generate the following artifacts:

API::
A jar containing the api annotations, etc. in `/api/target`.

Specification::
A PDF and HTML version of the specification document in `/spec/target/generated-docs/`.

TCK::
A war and a test artifact to verify an implementation. See the tck/README.asciidoc[readme in the `tck` module] for details on how to build and run the tests.
